// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: shippingAddress.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingAddressProtoFuncClient is the client API for ShippingAddressProtoFunc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingAddressProtoFuncClient interface {
	GetDefaultShippingAddress(ctx context.Context, in *ShippingAddressRequest, opts ...grpc.CallOption) (*ShippingAddressResponse, error)
	GetAllShippingAddress(ctx context.Context, in *ShippingAddressRequest, opts ...grpc.CallOption) (*ShippingAddressResponse, error)
}

type shippingAddressProtoFuncClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingAddressProtoFuncClient(cc grpc.ClientConnInterface) ShippingAddressProtoFuncClient {
	return &shippingAddressProtoFuncClient{cc}
}

func (c *shippingAddressProtoFuncClient) GetDefaultShippingAddress(ctx context.Context, in *ShippingAddressRequest, opts ...grpc.CallOption) (*ShippingAddressResponse, error) {
	out := new(ShippingAddressResponse)
	err := c.cc.Invoke(ctx, "/protos.ShippingAddressProtoFunc/GetDefaultShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingAddressProtoFuncClient) GetAllShippingAddress(ctx context.Context, in *ShippingAddressRequest, opts ...grpc.CallOption) (*ShippingAddressResponse, error) {
	out := new(ShippingAddressResponse)
	err := c.cc.Invoke(ctx, "/protos.ShippingAddressProtoFunc/GetAllShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingAddressProtoFuncServer is the server API for ShippingAddressProtoFunc service.
// All implementations must embed UnimplementedShippingAddressProtoFuncServer
// for forward compatibility
type ShippingAddressProtoFuncServer interface {
	GetDefaultShippingAddress(context.Context, *ShippingAddressRequest) (*ShippingAddressResponse, error)
	GetAllShippingAddress(context.Context, *ShippingAddressRequest) (*ShippingAddressResponse, error)
	mustEmbedUnimplementedShippingAddressProtoFuncServer()
}

// UnimplementedShippingAddressProtoFuncServer must be embedded to have forward compatible implementations.
type UnimplementedShippingAddressProtoFuncServer struct {
}

func (UnimplementedShippingAddressProtoFuncServer) GetDefaultShippingAddress(context.Context, *ShippingAddressRequest) (*ShippingAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultShippingAddress not implemented")
}
func (UnimplementedShippingAddressProtoFuncServer) GetAllShippingAddress(context.Context, *ShippingAddressRequest) (*ShippingAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShippingAddress not implemented")
}
func (UnimplementedShippingAddressProtoFuncServer) mustEmbedUnimplementedShippingAddressProtoFuncServer() {
}

// UnsafeShippingAddressProtoFuncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingAddressProtoFuncServer will
// result in compilation errors.
type UnsafeShippingAddressProtoFuncServer interface {
	mustEmbedUnimplementedShippingAddressProtoFuncServer()
}

func RegisterShippingAddressProtoFuncServer(s grpc.ServiceRegistrar, srv ShippingAddressProtoFuncServer) {
	s.RegisterService(&ShippingAddressProtoFunc_ServiceDesc, srv)
}

func _ShippingAddressProtoFunc_GetDefaultShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingAddressProtoFuncServer).GetDefaultShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ShippingAddressProtoFunc/GetDefaultShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingAddressProtoFuncServer).GetDefaultShippingAddress(ctx, req.(*ShippingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingAddressProtoFunc_GetAllShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingAddressProtoFuncServer).GetAllShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ShippingAddressProtoFunc/GetAllShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingAddressProtoFuncServer).GetAllShippingAddress(ctx, req.(*ShippingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingAddressProtoFunc_ServiceDesc is the grpc.ServiceDesc for ShippingAddressProtoFunc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingAddressProtoFunc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ShippingAddressProtoFunc",
	HandlerType: (*ShippingAddressProtoFuncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultShippingAddress",
			Handler:    _ShippingAddressProtoFunc_GetDefaultShippingAddress_Handler,
		},
		{
			MethodName: "GetAllShippingAddress",
			Handler:    _ShippingAddressProtoFunc_GetAllShippingAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shippingAddress.proto",
}
