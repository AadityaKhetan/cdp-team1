// Code generated by MockGen. DO NOT EDIT.
// Source: cartService/domain/service (interfaces: CartService)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "cartService/domain/model"
	error "cartService/internal/error"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCartService is a mock of CartService interface
type MockCartService struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceMockRecorder
}

// MockCartServiceMockRecorder is the mock recorder for MockCartService
type MockCartServiceMockRecorder struct {
	mock *MockCartService
}

// NewMockCartService creates a new mock instance
func NewMockCartService(ctrl *gomock.Controller) *MockCartService {
	mock := &MockCartService{ctrl: ctrl}
	mock.recorder = &MockCartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCartService) EXPECT() *MockCartServiceMockRecorder {
	return m.recorder
}

// AddToCart mocks base method
func (m *MockCartService) AddToCart(arg0 *model.Cart, arg1 string) *error.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", arg0, arg1)
	ret0, _ := ret[0].(*error.AppError)
	return ret0
}

// AddToCart indicates an expected call of AddToCart
func (mr *MockCartServiceMockRecorder) AddToCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartService)(nil).AddToCart), arg0, arg1)
}

// DeleteCartByCustomerId mocks base method
func (m *MockCartService) DeleteCartByCustomerId(arg0 string) *error.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartByCustomerId", arg0)
	ret0, _ := ret[0].(*error.AppError)
	return ret0
}

// DeleteCartByCustomerId indicates an expected call of DeleteCartByCustomerId
func (mr *MockCartServiceMockRecorder) DeleteCartByCustomerId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartByCustomerId", reflect.TypeOf((*MockCartService)(nil).DeleteCartByCustomerId), arg0)
}

// DeleteCartItem mocks base method
func (m *MockCartService) DeleteCartItem(arg0, arg1 string) *error.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItem", arg0, arg1)
	ret0, _ := ret[0].(*error.AppError)
	return ret0
}

// DeleteCartItem indicates an expected call of DeleteCartItem
func (mr *MockCartServiceMockRecorder) DeleteCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItem", reflect.TypeOf((*MockCartService)(nil).DeleteCartItem), arg0, arg1)
}

// GetCartByCustomerId mocks base method
func (m *MockCartService) GetCartByCustomerId(arg0 string) (*model.Cart, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByCustomerId", arg0)
	ret0, _ := ret[0].(*model.Cart)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// GetCartByCustomerId indicates an expected call of GetCartByCustomerId
func (mr *MockCartServiceMockRecorder) GetCartByCustomerId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByCustomerId", reflect.TypeOf((*MockCartService)(nil).GetCartByCustomerId), arg0)
}

// UpdateCart mocks base method
func (m *MockCartService) UpdateCart(arg0, arg1 string, arg2 int) *error.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", arg0, arg1, arg2)
	ret0, _ := ret[0].(*error.AppError)
	return ret0
}

// UpdateCart indicates an expected call of UpdateCart
func (mr *MockCartServiceMockRecorder) UpdateCart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockCartService)(nil).UpdateCart), arg0, arg1, arg2)
}

// UserIDFromAuthToken mocks base method
func (m *MockCartService) UserIDFromAuthToken(arg0 string) (string, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserIDFromAuthToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// UserIDFromAuthToken indicates an expected call of UserIDFromAuthToken
func (mr *MockCartServiceMockRecorder) UserIDFromAuthToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserIDFromAuthToken", reflect.TypeOf((*MockCartService)(nil).UserIDFromAuthToken), arg0)
}
