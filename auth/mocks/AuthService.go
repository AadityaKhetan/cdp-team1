// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	errs "authService/errs"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: _a0, _a1, _a2
func (_m *AuthService) CreateSession(_a0 string, _a1 string, _a2 string) *errs.AppError {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(string, string, string) *errs.AppError); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// ExtractTokenSign provides a mock function with given fields: _a0
func (_m *AuthService) ExtractTokenSign(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateJWT provides a mock function with given fields: _a0, _a1
func (_m *AuthService) GenerateJWT(_a0 string, _a1 string) (string, *errs.AppError) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string, string) *errs.AppError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields:
func (_m *AuthService) HealthCheck() *errs.AppError {
	ret := _m.Called()

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func() *errs.AppError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// Login provides a mock function with given fields: _a0, _a1, _a2
func (_m *AuthService) Login(_a0 string, _a1 string, _a2 string) (string, *errs.AppError) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string, string, string) *errs.AppError); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Logout provides a mock function with given fields: _a0
func (_m *AuthService) Logout(_a0 string) *errs.AppError {
	ret := _m.Called(_a0)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(string) *errs.AppError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// ParseAuthToken provides a mock function with given fields: _a0
func (_m *AuthService) ParseAuthToken(_a0 string) (string, string, *errs.AppError) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 *errs.AppError
	if rf, ok := ret.Get(2).(func(string) *errs.AppError); ok {
		r2 = rf(_a0)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errs.AppError)
		}
	}

	return r0, r1, r2
}

// VerifyAuthToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *AuthService) VerifyAuthToken(_a0 string, _a1 string, _a2 string) (bool, *errs.AppError) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string, string, string) *errs.AppError); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}
